[
  {
    "name": ".foo",
    "source": "$.foo",
    "testhit": "bar.foo",
    "testmiss": "foo.bar",
    "desc": "A Member Expression with the name of 'foo'",
    "threat": "example"
  },
  {
    "name": "foo.bar",
    "source": "foo.bar",
    "testhit": "foo.bar",
    "testmiss": "foo.baz;baz.bar;",
    "desc": "A member expression with object of 'foo' and member named 'bar'",
    "threat": "example"
  },
  {
    "name": "foo()",
    "source": "foo()",
    "testhit": "foo(bar+'bar')",
    "testmiss": "bar()",
    "desc": "Calling a function with the name 'foo'",
    "threat": "example"
  },
  {
    "name": ".foo()",
    "source": "foo()",
    "testhit": "foo(bar+'bar')",
    "testmiss": "bar()",
    "desc": "Calling a member function with the name 'foo'",
    "threat": "example"
  },
  {
    "name": "bar.baz()",
    "source": "bar.baz()",
    "testhit": "bar.baz()",
    "testmiss": "baz.bar();baz();",
    "desc": "A member expression with calls the member named 'bar' from object foo",
    "threat": "example"
  },
  {
    "name": "foo('bar')",
    "source": "foo('bar')",
    "testhit": "foo('bar')",
    "testmiss": "foo('baz')",
    "desc": "Calling a function with the name 'foo', checking to make sure that all literal arguments match",
    "threat": "example"
  },
  {
    "name": "foo=",
    "source": "foo=$",
    "testhit": "foo=bar+1;",
    "testmiss": "bar=foo",
    "desc": "An assignment to an identifier named 'foo'",
    "threat": "example"
  },
  {
    "name": ".bar=",
    "source": "$.bar=$",
    "testhit": "$.bar=stuff",
    "testmiss": "foo=foo.bar==stuff",
    "desc": "An assignment to an member identifier named 'foo'",
    "threat": "example"
  },
  {
    "name": "eval",
    "source": "eval()",
    "testhit": "eval('jsCode'+usercontrolledVal )",
    "testmiss": "eval",
    "desc": "Controlling of the first argument to eval(...) results in direct script execution.",
    "threat": "Execution Sink"
  },
  {
    "name": "Function",
    "source": "Function()",
    "testhit": "Function('jsCode'+usercontrolledVal ) ;\n Function('arg','arg2','jsCode'+usercontrolledVal )",
    "testmiss": "Function",
    "desc": "",
    "threat": "Execution Sink"
  },
  {
    "name": "setTimeout",
    "source": "setTimeout()",
    "testhit": "setTimeout('jsCode'+usercontrolledVal ,timeMs)",
    "testmiss": "setTimeout",
    "desc": "",
    "threat": "Execution Sink"
  },
  {
    "name": "setInterval",
    "source": "setInterval()",
    "testhit": "setInterval('jsCode'+usercontrolledVal ,timMs)",
    "testmiss": "setInterval",
    "desc": "",
    "threat": "Execution Sink"
  },
  {
    "name": "setImmediate",
    "source": "setImmediate()",
    "testhit": "setImmediate('jsCode'+usercontrolledVal )",
    "testmiss": "setImmediate",
    "desc": "",
    "threat": "Execution Sink"
  },
  {
    "name": "execScript",
    "source": "execScript()",
    "testhit": "execScript('jsCode'+usercontrolledVal ,'JScript')",
    "testmiss": "execSript",
    "desc": "",
    "threat": "Execution Sink"
  },
  {
    "name": "crypto.generateCRMFRequest",
    "source": "crypto.generateCRMFRequest()",
    "testhit": "crypto.generateCRMFRequest('CN=0',0,0,null,'jsCode'+usercontrolledVal,384,null,'rsa-dual-use')",
    "testmiss": "crypto.generateCRMFRequest",
    "desc": "",
    "threat": "Execution Sink"
  },
  {
    "name": "document.write ",
    "source": "document.write()",
    "testhit": "document.write('test')",
    "testmiss": "document.write",
    "desc": "",
    "threat": "HTMLElement Sink"
  },
  {
    "name": "document.writeln",
    "source": "document.writeln()",
    "testhit": "document.writeln('test')",
    "testmiss": "document.writeln",
    "desc": "",
    "threat": "HTMLElement Sink"
  },
  {
    "name": ".innerHTML ",
    "source": "$.innerHTML ",
    "testhit": "a.innerHTML",
    "testmiss": "innerHTML",
    "desc": "",
    "threat": "HTMLElement Sink"
  },
  {
    "name": ".outerHTML ",
    "source": "$.outerHTML ",
    "testhit": "a.outerHTML",
    "testmiss": "outerHTML",
    "desc": "",
    "threat": "HTMLElement Sink"
  },
  {
    "name": "insertAdjacentHTML()",
    "source": "insertAdjacentHTML()",
    "testhit": "insertAdjacentHTML(foo)",
    "testmiss": "insertAdjacentHTML",
    "desc": "",
    "threat": "HTMLElement Sink"
  },
  {
    "name": ".createContextualFragment",
    "source": "$.createContextualFragment",
    "testhit": "foo.createContextualFragment",
    "testmiss": "createContextualFragment",
    "desc": "",
    "threat": "HTMLElement Sink"
  },
  {
    "name": ".location=",
    "source": "$.location=$",
    "testhit": "foo.location=bar",
    "testmiss": "foo.location==bar",
    "desc": "Possible location sink",
    "threat": "Location Sink"
  },
  {
    "name": ".href=",
    "source": "$.href=$",
    "testhit": "foo.href=bar",
    "testmiss": "foo.href==bar",
    "desc": "Possible location sink",
    "threat": "Location Sink"
  },
  {
    "name": ".pathname=",
    "source": "$.pathname=$",
    "testhit": "foo.pathname=bar",
    "testmiss": "foo.pathname==bar",
    "desc": "Possible location sink",
    "threat": "Location Sink"
  },
  {
    "name": ".search=",
    "source": "$.search=$",
    "testhit": "foo.search=bar",
    "testmiss": "foo.search==bar",
    "desc": "Possible location sink",
    "threat": "Location Sink"
  },
  {
    "name": ".protocol=",
    "source": "$.protocol=$",
    "testhit": "foo.protocol=bar",
    "testmiss": "foo.protocol==bar",
    "desc": "Possible location sink",
    "threat": "Location Sink"
  },
  {
    "name": ".hostname=",
    "source": "$.hostname=$",
    "testhit": "foo.hostname=bar",
    "testmiss": "foo.hostname==bar",
    "desc": "Possible location sink",
    "threat": "Location Sink"
  },
  {
    "name": ".src=",
    "source": "$.src=$",
    "testhit": "bar.src=foo",
    "testmiss": "src.bar",
    "desc": ".src on certain HTMLElements can be location sinks, or direct script execution. ",
    "threat": "Location Sink"
  },
  {
    "name": "parseFromString()",
    "source": "parseFromString()",
    "testhit": "parseFromString(bar+'bar')",
    "testmiss": "parseFromString",
    "desc": "Calling a function with the name 'foo'",
    "threat": "Interesting Function"
  },
  {
    "name": "addEventListener()",
    "source": "addEventListener()",
    "testhit": "addEventListener(bar+'bar')",
    "testmiss": "addEventListener",
    "desc": "\n",
    "threat": "Input Sink"
  },
  {
    "name": "onmessage=",
    "source": "onmessage=$",
    "testhit": "onmessage=bar",
    "testmiss": "onmessage",
    "desc": "Check to make sure message handler validates to protect against malicious cross-origin message.",
    "threat": "Input Validation"
  },
  {
    "name": "start mozActivity",
    "source": "new MozActivity()",
    "testhit": "new MozActivity({type:'pick'})",
    "testmiss": "MozActivity +1",
    "desc": "",
    "threat": ""
  },
  {
    "name": "handle mozActivity",
    "source": "mozSetMessageHandler('activity')",
    "testhit": "navigator.mozSetMessageHandler('activity',callback)",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "handle system message",
    "source": "mozSetMessageHandler()",
    "testhit": "navigator.mozSetMessageHandler",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "access datastore",
    "source": "navigator.getDataStores",
    "testhit": "navigator.getDataStores",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "Make InterAppCommunication",
    "source": "connect()",
    "testhit": "app.connect('bluetoothTransfercomms')",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "Recieve InterAppCommunication",
    "source": "setMessageHandler('connect')",
    "testhit": " navigator.setMessageHandler('connect',callback)",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "alarms permission",
    "source": "navigator.mozAlarms",
    "testhit": "navigator.mozAlarms",
    "testmiss": "MozAlarms",
    "desc": "",
    "threat": "sensitive api"
  },
  {
    "name": "attention permission",
    "source": "window.open($, $, 'attention')",
    "testhit": "window.open('oncall.html', '', 'attention');",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-capture permission",
    "source": "navigator.getUserMedia",
    "testhit": "navigator.getUserMedia({audio:true});",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-channel-alarm permission",
    "source": "$.mozAudioChannelType=$",
    "testhit": "ringtonePlayer.mozAudioChannelType = 'alarm'",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-channel-content permission",
    "source": "$.mozAudioChannelType=$",
    "testhit": "ringtonePlayer.mozAudioChannelType = 'content'",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-channel-normal permission",
    "source": "$.mozAudioChannelType=$",
    "testhit": "ringtonePlayer.mozAudioChannelType = 'normal'",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-channel-notification permission",
    "source": "$.mozAudioChannelType=$",
    "testhit": "ringtonePlayer.mozAudioChannelType = 'notification'",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-channel-publicnotification permission",
    "source": "$.mozAudioChannelType=$",
    "testhit": "ringtonePlayer.mozAudioChannelType = 'publicnotification'",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-channel-ringer permission",
    "source": "$.mozAudioChannelType=$",
    "testhit": "ringtonePlayer.mozAudioChannelType = 'ringer'",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "audio-channel-telephony permission",
    "source": "$.mozAudioChannelType=$",
    "testhit": "ringtonePlayer.mozAudioChannelType = 'telephony'",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "background-sensors permission",
    "source": "addEventListener('deviceproximity', callback)",
    "testhit": "window.addEventListener('deviceproximity', callback)",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "bluetooth permission",
    "source": "navigator.mozBluetooth",
    "testhit": "window.navigator.mozBluetooth",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "browser permission",
    "source": "setAttribute('mozbrowser')",
    "testhit": "iframe.setAttribute('mozbrowser', true);",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "camera permission",
    "source": "$.mozCamera",
    "testhit": "this.mozCamera.onShutter = this.onShutter;",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "cellbroadcast permission",
    "source": "addEventListener('cellbroadcastmsgchanged')",
    "testhit": "window.addEventListener('cellbroadcastmsgchanged', callback)",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "contacts permission",
    "source": "$.mozContacts",
    "testhit": "navigator.mozContacts.oncontactchange = callback",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "desktop-notification permission",
    "source": "new Notification()",
    "testhit": "var notification = new Notification(title, {body: body, icon: iconURL});",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "device-storage:apps permission",
    "source": "getDeviceStorage('apps')",
    "testhit": "apps = navigator.getDeviceStorage('apps');",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "device-storage:crashes permission",
    "source": "getDeviceStorage('crashes')",
    "testhit": "crashes = navigator.getDeviceStorage('crashes');",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "device-storage:music permission",
    "source": "getDeviceStorage('music')",
    "testhit": "storage = navigator.getDeviceStorage('music');",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "device-storage:pictures permission",
    "source": "getDeviceStorage('pictures')",
    "testhit": "this.image = navigator.getDeviceStorage('pictures');",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "device-storage:sdcard permission",
    "source": "getDeviceStorage('sdcard')",
    "testhit": "var storage = navigator.getDeviceStorage('sdcard');",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "device-storage:videos permission",
    "source": "getDeviceStorage('videos')",
    "testhit": "this.video = navigator.getDeviceStorage('videos');",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "downloads permission",
    "source": "navigator.mozDownloadManager",
    "testhit": "navigator.mozDownloadManager",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "embed-apps permission",
    "source": "setAttribute('mozapp')",
    "testhit": "browser.setAttribute('mozapp', config.manifestURL);",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "fmradio permission",
    "source": "navigator.mozFMRadio",
    "testhit": "navigator.mozFMRadio",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "geolocation permission",
    "source": "navigator.geolocation",
    "testhit": "var geolocation = navigator.geolocation;",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "idle permission",
    "source": "navigator.addIdleObserver",
    "testhit": "navigator.addIdleObserver",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "input permission",
    "source": "navigator.mozInputMethod",
    "testhit": "window.navigator.mozInputMethod",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "input-manage permission",
    "source": "mgmt.hide()",
    "testhit": "navigator.mozInputMethod.mgmt.hide()",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "mobileconnection permission",
    "source": "navigator.mozMobileConnections",
    "testhit": "navigator.mozMobileConnections",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "mobilenetwork permission",
    "source": "$.lastKnownHomeNetwork",
    "testhit": "connection.lastKnownHomeNetwork && connection.lastKnownNetwork",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "mobilenetwork permission",
    "source": "$.lastKnownNetwork",
    "testhit": "connection.lastKnownHomeNetwork && connection.lastKnownNetwork",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "network-events permission",
    "source": "addEventListener('moznetworkupload')",
    "testhit": "addEventListener('moznetworkupload', uploadHandler);\naddEventListener('moznetworkdownload', downloadHandler);",
    "testmiss": "addEventListener('moznetworkdownload')",
    "desc": "",
    "threat": ""
  },
  {
    "name": "network-events permission",
    "source": "addEventListener('moznetworkdownload')",
    "testhit": "addEventListener('moznetworkupload', uploadHandler);\naddEventListener('moznetworkdownload', downloadHandler);",
    "testmiss": "addEventListener('moznetworkupload')",
    "desc": "",
    "threat": ""
  },
  {
    "name": "networkstats-manage permission",
    "source": "navigator.mozNetworkStats",
    "testhit": "var networks = navigator.mozNetworkStats.getAvailableNetworks();",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "nfc permission",
    "source": "navigator.mozNfc",
    "testhit": "navigator.mozNfc",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "nfc-manager permission",
    "source": "",
    "testhit": "",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "open-remote-window permission",
    "source": "window.open($,$, 'remote=true');",
    "testhit": "window.open(target.dataset.url, '_blank', 'remote=true');",
    "testmiss": "",
    "desc": "Not sure if testhit example is right here..",
    "threat": ""
  },
  {
    "name": "permissions permission",
    "source": "navigator.mozPermissionSettings",
    "testhit": "var mozPerms = navigator.mozPermissionSettings;",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "phonenumberservice permission",
    "source": "navigator.mozPhoneNumberService",
    "testhit": "var service = navigator.mozPhoneNumberService;",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "power permission",
    "source": "navigator.mozPower",
    "testhit": "navigator.mozPower",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "settings permission",
    "source": "navigator.mozSettings",
    "testhit": "window.navigator.mozSettings",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "sms permission",
    "source": "navigator.mozMobileMessage",
    "testhit": "navigator.mozMobileMessage",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "speaker-control permission",
    "source": "new MozSpeakerManager()",
    "testhit": "var mgr = new MozSpeakerManager();",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "systemXHR permission",
    "source": "new XMLHttpRequest({mozSystem: true});",
    "testhit": "var xhr = new XMLHttpRequest({mozSystem: true});",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "tcp-socket permission",
    "source": "navigator.mozTCPSocket;",
    "testhit": "var TCPSocket = navigator.mozTCPSocket;",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "telephony permission",
    "source": "navigator.mozTelephony",
    "testhit": "navigator.mozTelephony.stopTone(this.serviceId);",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "time permission",
    "source": "navigator.mozTime",
    "testhit": "_mozTime = window.navigator.mozTime;",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "video-capture permission",
    "source": "navigator.getUserMedia",
    "testhit": "navigator.getUserMedia({video:true});",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "voicemail permission",
    "source": "navigator.mozVoicemail",
    "testhit": "var voicemail = navigator.mozVoicemail;",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "wappush permission",
    "source": "mozSetMessageHandler('wappush-received')",
    "testhit": "window.navigator.mozSetMessageHandler('wappush-received', wpm_onWapPushReceived);",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "webapps-manage permission",
    "source": "mgmt.getAll()",
    "testhit": "var req = navigator.mozApps.mgmt.getAll();",
    "testmiss": "",
    "desc": "",
    "threat": ""
  },
  {
    "name": "wifi-manage permission",
    "source": "navigator.mozWifiManager",
    "testhit": "navigator.mozWifiManager",
    "testmiss": "",
    "desc": "",
    "threat": ""
  }
]